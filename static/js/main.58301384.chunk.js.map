{"version":3,"sources":["components/main/header/Title.jsx","components/main/header/Navigation.jsx","components/main/content/homePage/HomePage.jsx","components/repository/DataRepository.jsx","components/main/content/getCurrenciesPage/Columns.jsx","components/main/content/getCurrenciesPage/GetCurrenciesPage.jsx","components/main/content/getPairsPage/Columns.jsx","components/main/content/getPairsPage/GetPairsPage.jsx","components/main/content/errorPage/ErrorPage.jsx","components/routing/Routing.jsx","components/main/footer/Footer.jsx","App.js","serviceWorker.js","index.js"],"names":["Title","react_default","a","createElement","className","Navigation","react_router_dom","type","to","HomePage","getData","_ref","Object","asyncToGenerator","regenerator_default","mark","_callee","url","response","wrap","_context","prev","next","fetch","sent","ok","json","abrupt","Error","status","t0","alert","concat","stop","_x","apply","this","arguments","getCurrenciesData","_ref2","_callee2","_context2","getPairsData","_ref3","_callee3","_context3","columnDefs","headerName","field","sortable","filter","width","GetCurrenciesPage","state","time","Date","toLocaleString","currencies","handleReFresh","data","refreshTime","_this","setState","Fragment","onClick","style","height","widht","main","rowData","Component","pairs","handleRefresh","ErrorPage","Routing","react_router","path","exact","component","GetPairsPage","Footer","App","basename","process","header_Title","header_Navigation","routing_Routing","footer_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.58301384.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Title = () => {\r\n    return (\r\n        <div className='row d-flex justify-content-center title-panel'>\r\n           Cryptocurrency Data Displayer\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default Title;","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\n\r\nconst Navigation =() =>{\r\n  return(\r\n    <div>\r\n      <nav className='d-flex justify-content-center navigation-panel'>\r\n        <NavLink type='button' className='btn btn-primary navigation-btn' to={'/currencies'}>Get Currencies</NavLink>        \r\n        <NavLink type='button' className='btn btn-primary navigation-btn' to={'/'}>Home</NavLink>\r\n        <NavLink type='button' className='btn btn-primary navigation-btn' to={'/pairs'}>Get Pairs</NavLink>\r\n      </nav>\r\n    </div>\r\n  )\r\n}\r\n  \r\nexport default Navigation;","import React from 'react';\r\n\r\nconst HomePage = () => {\r\n  return ( \r\n    <div className='home-panel-master row d-flex justify-content-center'>\r\n      <div className='text-center home-panel'>\r\n          This simple application enables a real-time displaying of the two sets of the data of cryptocurrencies.\r\n      </div>\r\n      <div className='text-center home-panel'>\r\n          Get Currencies provides the currencies of cryptocurrencies as well as non-crypto currencies.\r\n          Get Pairs provides the pairs of the listed currencies.\r\n      </div>\r\n      <div className='text-center home-panel'>\r\n          The aim of this project was to fetch the data from the public API (https://nexchange2.docs.apiary.io) and present two spreadsheets of data in a table.\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default HomePage;","const GetCurrenciesURL = 'https://api.nexchange.io/en/api/v1/currency/';\r\nconst GetPairsURL = 'https://api.nexchange.io/en/api/v1/pair/';\r\n\r\nconst getData = async(url) => {\r\n    try {\r\n        let response = await fetch(url);\r\n        if (response.ok) {\r\n          return await response.json();\r\n        }\r\n        throw new Error(response.status)  \r\n      } catch(error) {\r\n          alert(`There was an error accessing the data: ${error}.` )\r\n        }\r\n}\r\n\r\nexport const getCurrenciesData = async() =>{\r\n    return await getData(GetCurrenciesURL);\r\n  }\r\n\r\nexport const getPairsData = async() =>{\r\n    return await getData(GetPairsURL);\r\n}\r\n  ","export const columnDefs = [\r\n  {\r\n    headerName: 'Code', \r\n    field: 'code',\r\n    sortable: true,\r\n    filter: true,\r\n  }, \r\n  {\r\n    headerName: 'Name', \r\n    field: 'name',\r\n    sortable: true,\r\n    filter: true,\r\n  }, \r\n  {\r\n    headerName: 'Min_Confirmations', \r\n    field: 'min_confirmations',\r\n    filter: true ,\r\n    sortable: true,\r\n    width: 150,\r\n  },\r\n  {\r\n    headerName: 'Is_Crypto', \r\n    field: 'is_crypto',\r\n    filter: true ,\r\n    sortable: true,\r\n    width: 150,\r\n  },\r\n  {\r\n    headerName: 'Minimal_Amount', \r\n    field: 'minimal_amount',\r\n    filter: true ,\r\n    sortable: true \r\n  },\r\n  {\r\n    headerName: 'Is_Base_Of_Enabled_Pair', \r\n    field: 'is_base_of_enabled_pair',\r\n    sortable: true,\r\n    filter: true,\r\n    width: 150,\r\n  },\r\n  {\r\n    headerName: 'Is_Quote_Of_Enabled_Pair', \r\n    field: 'is_quote_of_enabled_pair',\r\n    sortable: true,\r\n    filter: true,\r\n    width: 150,\r\n  },\r\n  {\r\n    headerName: 'Has_Enabled_Pairs', \r\n    field: 'has_enabled_pairs',\r\n    sortable: true,\r\n    filter: true,\r\n    width: 150,\r\n  },\r\n  {\r\n    headerName: 'Is_Crypto', \r\n    field: 'is_crypto',\r\n    sortable: true,\r\n    filter: true,\r\n    width: 150,\r\n    \r\n  },\r\n  {\r\n    headerName: 'Withdrawal_Fee', \r\n    field: 'withdrawal_fee',\r\n    sortable: true,\r\n    filter: true,\r\n  }\r\n]","import React,{Component} from 'react';\r\nimport {AgGridReact} from 'ag-grid-react';\r\n\r\nimport {getCurrenciesData} from '../../../repository/DataRepository';\r\nimport {columnDefs} from './Columns';\r\n\r\nclass GetCurrenciesPage extends Component {\r\n  state = { \r\n    time: new Date().toLocaleString(),\r\n    currencies:[],\r\n  }\r\n\r\n  async componentDidMount(){\r\n    const data = await getCurrenciesData();\r\n\r\n    this.setState({\r\n      currencies: data,\r\n    })\r\n  }\r\n  \r\n  handleReFresh = async() =>{\r\n    const data = await getCurrenciesData();\r\n    const refreshTime = new Date().toLocaleString();\r\n\r\n    this.setState({\r\n      currencies:data,\r\n      time: refreshTime\r\n    })\r\n  }\r\n\r\n  render() { \r\n    return (\r\n      <>\r\n        <div className='d-flex justify-content-around align-items-center border border-success'>\r\n          <p className='currencies-description'>Currencies Data Spreadsheet</p>\r\n          <button type='button' className='btn btn-success currencies-btn' onClick={this.handleReFresh}>Refresh</button>\r\n          <p className='currencies-description'>{this.state.time}</p>\r\n        </div>\r\n        <div className='ag-theme-balham' style={{height:'75vh', widht:'100vw'}}>\r\n          <AgGridReact \r\n            columnDefs={columnDefs}\r\n            rowData={this.state.currencies}>\r\n          </AgGridReact>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n \r\nexport default GetCurrenciesPage;","export const columnDefs = [\r\n    {\r\n        headerName: 'Name', \r\n        field: 'name',\r\n        sortable: true,\r\n        filter: true,\r\n    }, \r\n    {\r\n        headerName: 'Base', \r\n        field: 'base',\r\n        sortable: true,\r\n        filter: true,\r\n    }, \r\n    {\r\n        headerName: 'Quote', \r\n        field: 'quote',\r\n        sortable: true,\r\n        filter: true,\r\n    },\r\n    {\r\n        headerName: 'Fee_ask', \r\n        field: 'fee_ask',\r\n        sortable: true,\r\n        filter: true,\r\n    },\r\n    {\r\n        headerName: 'Fee_bid', \r\n        field: 'fee_bid',\r\n        sortable: true,\r\n        filter: true,\r\n    },\r\n    {\r\n        headerName: 'Disabled', \r\n        field: 'disabled',\r\n        sortable: true,\r\n        filter: true,\r\n        width: 175,\r\n    },\r\n    {\r\n        headerName: 'Test_mode', \r\n        field: 'test_mode',\r\n        sortable: true,\r\n        filter: true,\r\n        width: 175,\r\n    },\r\n    {\r\n        headerName: 'Orderbook_enabled', \r\n        field: 'orderbook_enabled',\r\n        sortable: true,\r\n        filter: true,\r\n        width: 175,\r\n    },\r\n    {\r\n        headerName: 'Reverse_orderbook_enabled', \r\n        field: 'reverse_orderbook_enabled',\r\n        sortable: true,\r\n        filter: true,\r\n        width: 175,\r\n    },\r\n]","import React,{Component} from 'react';\r\nimport {AgGridReact} from 'ag-grid-react';\r\n\r\nimport {getPairsData} from '../../../repository/DataRepository';\r\nimport {columnDefs} from './Columns';\r\n\r\nclass GetCurrenciesPage extends Component {\r\n  state = { \r\n    time: new Date().toLocaleString(),\r\n    pairs:[],\r\n  }\r\n\r\n  async componentDidMount(){\r\n    const data = await getPairsData();\r\n\r\n    this.setState({\r\n      currencies: data,\r\n    })\r\n  }\r\n\r\n  handleRefresh = async() =>{\r\n    const data = await getPairsData();\r\n    const refreshTime = new Date().toLocaleString();\r\n\r\n    this.setState({\r\n      currencies:data,\r\n      time: refreshTime\r\n    })\r\n  }\r\n\r\n  render() { \r\n    return (\r\n      <>\r\n        <div className='d-flex justify-content-around align-items-center border border-success'>\r\n          <p className='pairs-description'>Pairs Data Spreadsheet</p>\r\n          <button type='button' className='btn btn-success pairs-btn' onClick={this.handleRefresh}>Refresh</button>\r\n          <p className='pairs-description'>{this.state.time}</p>\r\n        </div>\r\n        <div className='ag-theme-balham' style={{height:'75vh', widht:'100vw'}}>\r\n          <AgGridReact \r\n            columnDefs={columnDefs}\r\n            rowData={this.state.currencies}>\r\n          </AgGridReact>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GetCurrenciesPage;","import React from 'react';\r\n\r\nconst ErrorPage = () => {\r\n  return ( \r\n    <div className='error-panel'>\r\n      <div className='d-flex justify-content-center'>\r\n        <h2>The URL address does not exist.</h2>\r\n      </div>\r\n      <div className='d-flex justify-content-center'>\r\n        <h4>Please check if the URL address is correct.</h4>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ErrorPage;","import React from 'react';\r\nimport {Route, Switch} from 'react-router-dom';\r\n\r\nimport HomePage from '../main/content/homePage/HomePage';\r\nimport GetCurrenciesPage from '../main/content/getCurrenciesPage/GetCurrenciesPage';\r\nimport GetPairsPage from '../main/content/getPairsPage/GetPairsPage';\r\nimport ErrorPage from '../main/content/errorPage/ErrorPage';\r\n\r\nconst Routing = () => {\r\n    return ( \r\n        <Switch>\r\n            <Route path='/' exact component={HomePage}/>\r\n            <Route path='/currencies' component={GetCurrenciesPage}/>\r\n            <Route path='/pairs' component={GetPairsPage}/> \r\n            <Route  component={ErrorPage}/> \r\n        </Switch> \r\n    );\r\n}\r\n \r\nexport default Routing;","import React from 'react';\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <div className='footer-panel'>\r\n            Developed by Karolina Banasiewicz\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default Footer;","import React from 'react';\r\nimport {BrowserRouter as Router} from 'react-router-dom';\r\n\r\nimport Title from './components/main/header/Title';\r\nimport Navigation from '../src/components/main/header/Navigation';\r\nimport Routing from './components/routing/Routing';\r\nimport Footer from './components/main/footer/Footer';\r\n\r\nconst App = () => {\r\n  return ( \r\n    <Router basename={process.env.PUBLIC_URL}>\r\n      <div className='app'>\r\n        <header>\r\n          <Title />\r\n          <Navigation />\r\n        </header>\r\n        <main>\r\n          <Routing />\r\n        </main>\r\n        <footer>\r\n          <Footer />\r\n        </footer>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}